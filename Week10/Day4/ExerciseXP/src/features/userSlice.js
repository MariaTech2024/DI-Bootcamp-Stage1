import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

//Initial state for the user slice
const initialState = {
  userData: {},    //Stores user data
  loading: false,  //Indicates if a request is in progress
  error: null,     //Stores any error messages
};

//Thunk action creator for fetching user data
export const fetchUserData = createAsyncThunk(
  'user/fetchUserData',
  async (_, { dispatch }) => {
    //Dispatch fetchUserStart action to update state to loading
    dispatch(fetchUserStart());
    try {
      //Make API call to fetch user data
      const response = await fetch('https://jsonplaceholder.typicode.com/users/1');
      const data = await response.json();
      //Dispatch fetchUserSuccess action with the fetched data
      dispatch(fetchUserSuccess(data));
    } catch (error) {
      //Dispatch fetchUserFailure action if an error occurs
      dispatch(fetchUserFailure(error.toString()));
    }
  }
);

//Create a slice for user data
const userSlice = createSlice({
  name: 'user',   //Name of the slice
  initialState,   //Initial state defined above
  reducers: {
    //Action to handle the start of a fetch request
    fetchUserStart(state) {
      state.loading = true;  //Set loading to true
      state.error = null;    //Clear any previous errors
    },
    //Action to handle successful data fetch
    fetchUserSuccess(state, action) {
      state.userData = action.payload;  //Set userData with the fetched data
      state.loading = false;            //Set loading to false
    },
    //Action to handle a failed data fetch
    fetchUserFailure(state, action) {
      state.error = action.payload;  //Set error with the error message
      state.loading = false;         //Set loading to false
    },
  },
});

//Export actions generated by createSlice
export const { fetchUserStart, fetchUserSuccess, fetchUserFailure } = userSlice.actions;

//Export the reducer to be used in the store
export default userSlice.reducer;